/*
Praktikum zur Lehrveranstaltung Datenbanken WS 23/24
Praktikum Nr.5
Gruppe 3
Schemaskript
Alisa Stoyanova
Rahim Akkoyun
*/

-- Vorhandene Daten löschen

DROP TABLE Hausarzt CASCADE CONSTRAINTS;
DROP TABLE Facharzt CASCADE CONSTRAINTS;
DROP TABLE Patient CASCADE CONSTRAINTS;
DROP TABLE Apotheke CASCADE CONSTRAINTS;
DROP TABLE Probe CASCADE CONSTRAINTS;
DROP TABLE DigitalePatientenakte CASCADE CONSTRAINTS;
DROP TABLE LaborMesswerte CASCADE CONSTRAINTS; --DO NOT DELETE, SAFE TO IGNORE
DROP TABLE messwert CASCADE CONSTRAINTS;
DROP TABLE eRezept CASCADE CONSTRAINTS;
DROP TABLE Termin CASCADE CONSTRAINTS;
DROP TABLE Ueberweisung CASCADE CONSTRAINTS;
DROP TABLE informierenFA CASCADE CONSTRAINTS;
--DROP TABLE erzeugenLM CASCADE CONSTRAINTS;
DROP TABLE labor CASCADE CONSTRAINTS;

-- Neues Schema für Hausarzt anlegen

CREATE TABLE Hausarzt
(
    Arztnummer INTEGER PRIMARY KEY,
    Name       VARCHAR(255) NOT NULL,
    Strasse    VARCHAR(255) NOT NULL,
    Hausnummer INTEGER NOT NULL check (Hausnummer BETWEEN 1 and 999),
    PLZ        INTEGER NOT NULL,
    Praxisname VARCHAR(255) --überflüssig --> löschen?
);

-- Neues Schema für Facharzt anlegen

CREATE TABLE Facharzt
(
    FArztnummer  INTEGER PRIMARY KEY,
    Name         VARCHAR(255) NOT NULL,
    Strasse      VARCHAR(255) NOT NULL,
    Hausnummer INTEGER NOT NULL check (Hausnummer BETWEEN 1 and 999),
    PLZ          INTEGER NOT NULL,
    Praxisname   VARCHAR(255), --überflüssig --> löschen?
    Fachrichtung VARCHAR(255) NOT NULL
);

-- Neues Schema für Patient anlegen

CREATE TABLE Patient
(
    KVNUMMER     INTEGER PRIMARY KEY,
    Name         VARCHAR(255) NOT NULL,
    Geburtsdatum DATE,
    Strasse      VARCHAR(255) NOT NULL,
    Hausnummer   INTEGER      NOT NULL check (Hausnummer BETWEEN 1 and 999),
    PLZ          INTEGER      NOT NULL,
    betreutVon   INTEGER      REFERENCES Hausarzt ON DELETE SET NULL
--Patient hat keinen Hausarzt mehr, wird aber nicht aus der Welt gelöscht, wenn sein Hausarzt z.B. in Rente geht (wird gelöscht).
);

-- Neues Schema für Apotheke anlegen

CREATE TABLE Apotheke -- soll von Medikament getrennt werden
(
    Apothekennummer INTEGER PRIMARY KEY,
    Name            VARCHAR(255) NOT NULL,
    Strasse         VARCHAR(255) NOT NULL,
    Hausnummer      INTEGER      NOT NULL check (Hausnummer BETWEEN 1 and 999),
    PLZ             INTEGER      NOT NULL,
    Medikament      VARCHAR(255) NOT NULL,
    Datum           DATE,
    ausgehaendigtAn INTEGER REFERENCES Patient ON DELETE CASCADE --Wenn Apotheke gelöscht wird, wird auch Patient verschwinden!
);

-- Neues Schema für Probe anlegen

CREATE TABLE Probe
(
    Probenummer  INTEGER PRIMARY KEY,
    Probetyp     VARCHAR(255) NOT NULL,
    entnommenVon INTEGER REFERENCES Hausarzt ON DELETE CASCADE, --SET NULL
    gegebenVon   INTEGER REFERENCES Patient ON DELETE CASCADE
);

-- Neues Schema für Digitale Patientenakte anlegen

CREATE TABLE DigitalePatientenakte
(
    Aktennummer    INTEGER PRIMARY KEY,
    Befund         VARCHAR(255) NOT NULL,
    Datum          DATE,
    eingetragenVon INTEGER REFERENCES Hausarzt ON DELETE SET NULL,
    gehoertZu      INTEGER REFERENCES Patient ON DELETE CASCADE
);

-- Neues Schema für Labor Messwerte anlegen

CREATE TABLE LaborMesswerte
(
    Messwertnummer INTEGER PRIMARY KEY,
    Probenummer    INTEGER,
    FOREIGN KEY (Probenummer) REFERENCES Probe (Probenummer) ON DELETE CASCADE,
    Messwert       VARCHAR(255) NOT NULL,
    Laborname      VARCHAR(255) NOT NULL,
    Strasse        VARCHAR(255) NOT NULL,
    Hausnummer     INTEGER NOT NULL check (Hausnummer BETWEEN 1 and 999),
    PLZ            INTEGER NOT NULL,
    erhaltenVon    INTEGER REFERENCES Hausarzt ON DELETE CASCADE, --SET NULL
    gehoertZu      INTEGER REFERENCES Patient ON DELETE CASCADE
);

-- Neues Schema für eRezept anlegen

CREATE TABLE eRezept
(
    Rezeptnummer    INTEGER PRIMARY KEY,
    Datum           DATE,
    Medikament      VARCHAR(255) NOT NULL,
    Dosierung       INTEGER,
    verschriebenVon INTEGER REFERENCES Hausarzt ON DELETE CASCADE, --SET NULL
    erhaltenVon     INTEGER REFERENCES Patient ON DELETE CASCADE,
    zugeordnetAn    INTEGER REFERENCES Apotheke ON DELETE CASCADE --SET NULL
);

-- Neues Schema für Termin anlegen

CREATE TABLE Termin
(
    Terminnummer INTEGER PRIMARY KEY,
    Datum        DATE,
    gegebenVon   INTEGER REFERENCES Hausarzt ON DELETE CASCADE,
    erhaltenVon  INTEGER REFERENCES Patient ON DELETE CASCADE
);

-- Neues Schema für Ueberweisung anlegen

CREATE TABLE ueberweisung (
    Ueberweisungsnummer INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, --die Nummer automatisch erzeugen
    Grund               VARCHAR(255) NOT NULL,
    --Das findet man alles heraus aus der Tabelle Facharzt
    /*Facharztname        VARCHAR(255) NOT NULL,
    Facharztstrasse     VARCHAR(255) NOT NULL,
    FacharztPLZ         VARCHAR(255) NOT NULL,*/
    --Facharzthausnummer  VARCHAR(255) NOT NULL, --Was ist das? In Daten sollte es korrigiert werden
    FArztnummer         INTEGER REFERENCES Facharzt ON DELETE CASCADE, --FArztnummer ist Primary Key von Facharzt
    ueberwiesenVon      INTEGER REFERENCES Hausarzt ON DELETE SET NULL,
    erhaltenVon         INTEGER REFERENCES Patient ON DELETE CASCADE);

-- Neues Schema für informierenFA (FA = Facharzt) anlegen

CREATE TABLE informierenFA
(
    Datum       DATE,
    Arztnummer  INTEGER REFERENCES Hausarzt ON DELETE CASCADE,
    FArztnummer INTEGER REFERENCES Facharzt ON DELETE CASCADE,
    PRIMARY KEY (Arztnummer, FArztnummer)
);

-- Neues Schema für erzeugenLM (LM = Labor Messwerte) anlegen

--überflüssig, da wir bereits Messwert und Probe in Messwert verbinden: Spalten MesswertNummer und ProbeNummer
/*CREATE TABLE erzeugenLM
(
    Probenummer    INTEGER REFERENCES Probe ON DELETE CASCADE,
    Messwertnummer INTEGER REFERENCES LaborMesswerte ON DELETE CASCADE
);*/

--neues Schema für Labore anlegen
CREATE TABLE labor (
    laborNr INTEGER PRIMARY KEY,
    name    VARCHAR(30) NOT NULL,
    strasse VARCHAR(30) NOT NULL,
    hausNr  INTEGER NOT NULL check (hausNr BETWEEN 1 and 999),
    plz     VARCHAR(30) NOT NULL);

--neues Schema für Blutprobe anlegen
CREATE TABLE blutProbe (
    probeNr            INTEGER PRIMARY KEY,
    gehoertDem         INTEGER REFERENCES Patient ON DELETE CASCADE,
    ap                 INTEGER NOT NULL,
    aAmylase           INTEGER NOT NULL,
    bilirubin          INTEGER NOT NULL,
    cholesterin        INTEGER NOT NULL,
    crp                INTEGER NOT NULL,
    eisen              INTEGER NOT NULL,
    elektrolyte        INTEGER NOT NULL,
    ferritin           INTEGER NOT NULL,
    gammaGt            INTEGER NOT NULL,
    got                INTEGER NOT NULL,
    gesamteiweiss      INTEGER NOT NULL,
    harnsaeure         INTEGER NOT NULL,
    harnstoff          INTEGER NOT NULL,
    kreatinin          INTEGER NOT NULL,
    ck                 INTEGER NOT NULL,
    ldh                INTEGER NOT NULL,
    lipase             INTEGER NOT NULL,
    neutralfette       INTEGER NOT NULL,
    schilddruesenwerte INTEGER NOT NULL);

ALTER TABLE labormesswerte
    RENAME TO messwert;

ALTER TABLE messwert
    ADD (laborNr INTEGER NOT NULL REFERENCES labor ON DELETE SET NULL);

ALTER TABLE messwert
    DROP (laborname, strasse, hausnummer, plz);

ALTER TABLE patient
    ADD (geschlecht VARCHAR(30) NOT NULL);

ALTER TABLE patient
    ADD (CONSTRAINT validSex
        CHECK (geschlecht = 'm' OR geschlecht = 'f' OR geschlecht = 'd'));

ALTER TABLE patient
    ADD (CONSTRAINT validBirthdate
        CHECK (geburtsdatum < SYSDATE - 18 * 365)); --die Ärzte behandeln nur volljährige Patienten

ALTER TABLE termin
    ADD (CONSTRAINT validDate
        CHECK (datum >= SYSDATE AND datum <= SYSDATE + 365));

ALTER TABLE ueberweisung
    ADD (gueltigkeitsdatum DATE);

--Rollen erstellen
CREATE ROLE patient;
CREATE ROLE hausarzt;
CREATE ROLE fachlabor;
CREATE ROLE facharzt;
CREATE ROLE apotheke;

--Zugriffsrechte für die Rollen definieren
--Patient
GRANT SELECT ON DB_WUY315.digitalePatientenakte TO patient; --Patienten können lesend auf ihre Patientenakte zugreifen, aber nicht schreiben
GRANT SELECT ON DB_WUY315.hausarzt TO patient; --Patient wählt einen Hausarzt

--Hausarzt
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.patient TO hausarzt; --Hausärzte können neue Patienten aufnehmen
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.digitalePatientenakte TO hausarzt WITH GRANT OPTION; --Hausärzte können Patientenakte für Patienten anlegen und bearbeiten, aber nicht löschen
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.termin TO hausarzt; --Hausärzte können mit Patienten einen Termin vereinbaren
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.probe TO hausarzt; --Hausärzte können Proben in ein Fachlabor schicken
GRANT SELECT ON DB_WUY315.messwert TO hausarzt; --Hausärzte können die Probenwerte zurückerhalten und in die Patientenakte eintragen
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.erezept TO hausarzt WITH GRANT OPTION; --Hausärzte können eRezepte ausstellen und an die Patienten weitergeben
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.ueberweisung TO hausarzt; --Hausärzte können an Fachärzte überweisen

--Fachlabor
--Fachlabore erhalten Proben, die anonymisiert sind: zu sehen sind nur Probenummer
CREATE VIEW laborViewProbe AS SELECT probeNummer, probeTyp, entnommenVon FROM probe;
CREATE VIEW laborViewBlutprobe AS SELECT probeNr, ap, aAmylase, bilirubin, cholesterin, crp, eisen, elektrolyte,
                                         ferritin, gammaGt, got, gesamteiweiss, harnsaeure, harnstoff, kreatinin, ck,
                                         ldh, lipase, neutralfette, schilddruesenwerte FROM blutProbe;
GRANT SELECT ON DB_WUY315.laborViewProbe TO fachlabor;
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.laborViewBlutProbe TO fachlabor;
GRANT SELECT, INSERT, UPDATE ON DB_WUY315.messwert TO fachlabor; --Fachlabore erzeugen die Untersuchungsergebnisse

--Gültigkeitsdatum von Überweisung automatisch erstellen
CREATE OR REPLACE TRIGGER expiryDate
    BEFORE INSERT ON UEBERWEISUNG
    FOR EACH ROW
    BEGIN
        :new.gueltigkeitsdatum := SYSDATE + 28;
    END;

--TODO
--Tabellen Messwert und Probe sind unnötig, in der 5.Aufgabe nur Blutprobe, Messwerte können Labore in Attribute von Probe schreiben

--Facharzt: Zugriffsrechte definieren
--Apotheke: Zugriffsrechte definieren

-- Hausärzte können den Fachärzten den Zugriff auf ausgewählte Patientenakten gewähren --> create View, aber wie?
-- temporäre Zugriff auf die Digitale Patientenakte eingerichtet --> WIE ?

--Trigger <-- Ferritin zu niedrig -> EisenPräperat (eRezept)
--Trigger <-- Harnstoff sehr hoch sind -> Überweisung an einen Facharzt für Radiologie

-- Einrichtung von Views, um einen gefilterten Zugriff zu erlauben

/*CREATE TRIGGER lowFerritin
    AFTER UPDATE ON blutprobe
    FOR EACH ROW
    BEGIN
        SELECT * FROM patient
            IF patient.geschlecht = 'm'
            AND patient.geburtsdatum <= SYSDATE - 45 * 365
            AND blutprobe.ferritin < 10 OR blutprobe.ferritin > 220 --Männer bis 45 Jahre: 10 bis 220
            THEN INSERT INTO erezept VALUE () -- neues eRezept für EisenPräperat automatisch erzeugen*/